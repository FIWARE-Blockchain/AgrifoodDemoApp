# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please looking at the SmartSDK Recipes
# in order to scale up to a proper architecture:
# 
# see: https://smartsdk.github.io/smartsdk-recipes/
#

version: '3.7'
services:

  # Agrifood Frontend Application
    agrifood:
      container_name: agrifood-app
      hostname: agrifood-app
      build:
        context: ../Agrifood
      ports:
        - '80:80' # localhost:80
      depends_on: 
        - orion
        - iota-service
      environment: 
        - ORION=http://orion:1026
        - IOTA_CLIENT=http://iota-service:1026
        - DLT_TYPE=iota
        # https://docs.iota.org/docs/getting-started/0.1/network/iota-networks
        - IOTA_PROVIDER=https://nodes.devnet.iota.org:443 
        - IOTA_ZMQ_PROVIDER=tcp://zmq.devnet.iota.org:5556
      networks:
        - default

  # context broker service
    orion:
      image: fiware/orion:2.4.0
      hostname: orion
      container_name: fiware-orion
      depends_on:
        - mongo-db
      networks:
        - default
      expose:
        - "1026"
      ports:
        - "1026:1026" # localhost:1026
      command: -dbhost mongo-db -logLevel DEBUG
      entrypoint: ["/usr/bin/contextBroker","-fg", "-multiservice", "-ngsiv1Autocast", "-corsOrigin='__ALL'", "-httpTimeout='1000'" ]
      healthcheck:
        test: curl --fail -s http://orion:1026/version || exit 1
  
  # Database
    mongo-db:
      image: mongo:3.6
      hostname: mongo-db
      container_name: db-mongo
      expose:
        - "27017"
      ports:
        - "27017:27017" # localhost:27017
      networks:
        - default
      command: --bind_ip_all --smallfiles
      volumes:
        - mongo-db:/data

  # IOTA Service 
    iota-service:
      container_name: iota-service
      hostname: iota-service
      build:
        context: ./IotaService
      ports:
        - '3001:3001' # localhost:3001
      environment: 
        - NODE_ENV=development
        - CONTEXT_BROKER=http://orion:1026
        - PORT=3001
        # https://docs.iota.org/docs/getting-started/0.1/network/iota-networks
        - IOTA_PROVIDER=https://nodes.devnet.iota.org:443 
        - IOTA_ZMQ_PROVIDER=tcp://zmq.devnet.iota.org:5556
      networks:
        - default

#  volumes 
volumes:
  mongo-db: ~
  postgres-db: ~
  
# network
networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24